[ { "title": "다시 시작", "url": "/posts/%EB%8B%A4%EC%8B%9C%EC%8B%9C%EC%9E%91/", "categories": "General, Life", "tags": "Life, Thought", "date": "2022-12-16 00:00:00 +0900", "snippet": "멈춘지 오래요새 공부에 재미도 붙였고, 조금은 개발자 다운 개발자가 되어가는게 느껴진다. 정리하는 것이 습관화 되고, 하루에 조금이라도 공부하는 것이 일상화 된 김에다시 블로그에도 글을 적어볼까 한다.내용은?지금까지의 블로그 글은 사실 기록보다는 보여주기식에 가까웠다. 내가 개발자다, 늘 공부한다는걸 Showing 해봤자, 모두가 알게되는 것은 얕은 나의 모습이다. 그리고 가장 중요한 점은, 나조차도 블로그에 가끔 온다는 것이다.이유가 뭘까 생각해보니, 가볍게 찾은 블로그 내용이나 읽을 자료들 또는 내가 그냥 공부했던 것들을 ..." }, { "title": "Typescript로 개발하는 React with MobX (1)", "url": "/posts/typescript-mobx-1/", "categories": "Typescript, React, MobX, Front-end", "tags": "Typescript, React, MobX, Front-end", "date": "2021-04-22 00:00:00 +0900", "snippet": "글 제목은 Typescript인데…천천히 글을 연재하면서 내용을 추가할 예정이다. 아무튼 내 맘대로 React 얘기도 했다가, MobX 얘기도 했다가, Typescript 얘기도 할 것이니 문제 없음.프로젝트 구조항상 새로운 프로젝트를 시작할 때면, 어떻게 프로젝트 구조를 잡아야 할 지가 큰 고민일 때가 많다. 이럴 때는 다른 프로젝트 구조를 참고하기도 하고, 사용하는 라이브러리나 프레임워크에서 제공하는 템플릿을 활용할 때가 많다.현재 개발 중인 프로젝트의 구조 또한 지인이 개발하던 프로젝트의 구조를 많이 참고하여 내 입맛에 ..." }, { "title": "Typescript로 개발하는 React with MobX (0)", "url": "/posts/typescript-mobx-0/", "categories": "Typescript, React, MobX, Front-end", "tags": "Typescript, React, MobX, Front-end", "date": "2021-04-21 00:00:00 +0900", "snippet": "프론트엔드를 개발해 보겠습니다UI… 사용자에게 보여지는 화면… Server와 Client에서 Client를 맡고 있는… 프론트…엔드… 여러 라이브러리와 프레임워크, 언어로 앱 또는 웹 어플리케이션을 만들 때 사용자에게 보여지는 GUI 부분을 우리는 Front-end라 칭한다. 다음의 블로그에서 참조하면 아래와 같은 설명을 확인할 수 있다. 프론트엔드와 백엔드는 프로그램 인터페이스와 서비스의 최초 사용자와 관련된 특성을 나타내는데 사용되는 용어이다 (여기서 “사용자”란 사람 또는 프로그램이 될 수 있다). 프론트엔드 응용프로그..." }, { "title": "final, static 그리고 final static. 아, Immutable Object", "url": "/posts/final_static/", "categories": "Programming Language, Java", "tags": "Programming Language, Java, static, final, Immutable Object", "date": "2021-04-06 00:00:00 +0900", "snippet": "final?사실, Java 외에도 final keyword는 많은 언어에 존재한다. 주로는 상수, 메소드, 클래스 정의 후 고정된 상태를 만들기 위해 사용한다. 고정된 상태라 하면, 불변하는 것이라 생각할 수 있다. 그렇다면 final로 생성한 변수가 불변인가? 그런데, 불변하다는 것이 정확히 무엇인가?Immutable?정의Immutable Object는 생성 후 상태를 변경하지 못하는 객체를 일컫는다. 굳이 객체 외에도 Immutable 하다는 것은 한 번 정의된 대상이 상태 변경이 불가능 함을 의미한다. 한 번 할당하면 ..." }, { "title": "Jest로 Test code 작성하기 (0)", "url": "/posts/jest-0/", "categories": "Jest, Test", "tags": "Jest, Test, Javascript, Node.js", "date": "2021-04-01 00:00:00 +0900", "snippet": "Jest?Javascript에서 Test code 작성을 위해 사용하는 Framework이다. 다음의 특징을 가진다. Zero config : Config free, on most JavaScript projects Snapshots :Make tests which keep track of large objects with ease Isolated : Tests are parallelized by running them in their own processes Jest is a delightful JavaScript T..." }, { "title": "Serverless framework를 활용한 서비스 개발 (1)", "url": "/posts/serverless-framework-setup-1/", "categories": "Distributed System, Serverless, Cloud", "tags": "Distributed System, Serverless, Framework, Cloud", "date": "2021-04-01 00:00:00 +0900", "snippet": "Function?serverless.yml 파일에는 functions 속성이 존재한다. 현재 개발 중인 프로젝트에서 일부 발췌하면 다음과 같다. 참고로, 아래의 설정값은 function.yml에 기입되어 있고, 해당 파일을 serverless.yml에서 참조하는 형태로 구성하였다.google-calendar: handler: src/handlers/router.common # AWS Lambda에 세팅되는 handler name: ${self:custom.env.region}-${self:custom.env.stage}-a..." }, { "title": "Serverless framework를 활용한 서비스 개발 (0)", "url": "/posts/serverless-framework-setup-0/", "categories": "Distributed System, Serverless, Cloud", "tags": "Distributed System, Serverless, Framework, Cloud", "date": "2021-03-31 00:00:00 +0900", "snippet": "설명공식 페이지의 설명은 다음과 같다. Develop, deploy, troubleshoot and secure your serverless applications with radically less overhead and cost by using the Serverless Framework. 대략적으로, Serverless Architecture 를 개발, 배포, 운영하는걸 편하게 해주는 일종의 추상화된 Framework라고 생각된다. Serverless는 serverless 환경을 배포하고 운영하기 위한 도구다.중요 개념..." }, { "title": "Local Server에 Kubernetes Cluster 구축하기 (0)", "url": "/posts/kubernetes-local-setup-0/", "categories": "Distributed System, Kubernetes", "tags": "Distributed System, Kubernetes, container orchestration", "date": "2021-03-26 00:00:00 +0900", "snippet": "마스터 노드에서 필요한 필수 포트 6443 포트 : Kubernetes API Server / Used By All2379~2380 포트 : etcd server client API / Used By kube-apiserver, etcd10250 포트 : Kubelet API / Used By Self, Control plane10251 포트 : kube-scheduler / Used By Self10252 포트 : kube-controller-manager / Used By Self워커 노드에서 필요한 필수 포트 1025..." }, { "title": "Web Server란?", "url": "/posts/webserver/", "categories": "Network, Server, Web Server", "tags": "Network, Server, Web Server", "date": "2021-01-17 00:00:00 +0900", "snippet": "참조 링크Web Server란 무엇인가" }, { "title": "Nginx, 정확히 무엇인가? (0)", "url": "/posts/nginx-0/", "categories": "Network, Server, Web Server", "tags": "Network, Server, Web Server", "date": "2021-01-14 00:00:00 +0900", "snippet": "개발 얘기에 앞서…개발을 하다보면 일단 남들이 쓰니까, 블로그에 써있는 대로, 이게 제일 좋다더라 등 별 생각없이 쓰게되는 경우가 많다. 필자 또한 개발자로서 최근 많이 반성하는 부분이 이것이다.유저가 아니라 엔지니어가 되자라는 마인드를 행동으로 하기 위해 부단히 노력중이다.이번 Nginx를 시작으로 무엇을 쓰고 있는지, 그렇다면 이것을 왜 쓰는지어떻게 작동하는지, 단점은 있는지 등 더 Deep-dive하게 CS의 세계를 알아보고자 한다.Nginx 전에 Web ServerNginx는 종류로 설명하자면 Web Server 프로그..." }, { "title": "systemd 옵션", "url": "/posts/systemd-option/", "categories": "OS, Linux", "tags": "개발, OS, Linux, Ubuntu, Systemd", "date": "2020-07-23 00:00:00 +0900", "snippet": "참조 링크systemd 옵션" }, { "title": "Microservice의 특징", "url": "/posts/microservice/", "categories": "Network, Architecture, Microservice", "tags": "Network, Architecture, Microservice", "date": "2020-07-23 00:00:00 +0900", "snippet": "Microservice란?서비스 디자인 스타일로서 작은 서비스의 결합을 통해 하나의 응용 프로그램을 개발하는 방법 각각의 서비스는 독립적인 비지니스 로직으로 구성 완전 자동화된 개발/배포 환경에 의해 각각 독립적으로 배포 최소한의 중심적인 관리 체계 각 시스템들은 다른 프로그래밍 언어, 다른 데이터 스토리지 기술로 작성 가능Microservice를 사용하는 이유?서비스를 충분히 작은 크기로 나누어 개발하되 상호 연계를 통해 좀 더 복잡하고 거대한 시스템을 만들어 갈 수 있음 스케일링에도 높은 자유도 -&amp;gt; 클라우드 ..." }, { "title": "Load balancer (1)", "url": "/posts/load-balancer-1/", "categories": "Network, Server, Load balancer", "tags": "Network, Server, Load balancer", "date": "2020-07-22 00:00:00 +0900", "snippet": "로드 밸런싱?부하분산 또는 로드 밸런싱(load balancing)은 컴퓨터 네트워크 기술의 일종 둘 혹은 셋 이상의 중앙처리장치 혹은 저장장치와 같은 컴퓨터 자원들에게 작업을 나누는 것을 의미로드밸런서 종류운영체제 로드밸런서 물리적 프로세서 간에 작업을 스케줄링네트워크 로드밸런서 사용 가능한 백엔드에서 네트워크 작업을 스케줄링네트워크 로드밸런서 종류L2(Data Link Layer) Mac Address Load Balancing 예시 : Mac &amp;gt; 80–00–20–30–1C-47 브릿지, 허브 등 장..." }, { "title": "HA Proxy란", "url": "/posts/haproxy/", "categories": "Network, Server, Load balancer", "tags": "Network, Server, Load balancer, HA Proxy", "date": "2020-07-22 00:00:00 +0900", "snippet": "HA Proxy특징 기존의 Load balancer는 Hardware 기반 HA Proxy는 Software load balancer 네트워크 스위치에서 제공하는 L4, L7 기능 제공참조 링크HA Proxy란? - Naver D2" }, { "title": "Apscheduler(Python 스케쥴링 라이브러리)", "url": "/posts/apscheduler/", "categories": "Programming Language, Python, Library, Apscheduler", "tags": "Programming Language, Python, Scheduler, Library, Apscheduler", "date": "2020-07-21 00:00:00 +0900", "snippet": "ApschedulerApscheduler란? Python code에 대한 Scheduling을 구성해주는 libraryTemplate codefrom apscheduler.jobstores.base import JobLookupErrorfrom apscheduler.schedulers.blocking import BlockingSchedulerfrom apscheduler.schedulers.background import BackgroundSchedulerfrom .logger import Loggerimport timei..." }, { "title": "Docker란?", "url": "/posts/docker/", "categories": "Distributed System, Docker", "tags": "Distributed System, Docker, Container, 환경 구축", "date": "2020-07-21 00:00:00 +0900", "snippet": "Docker란?설치### Update repository$ sudo apt-get update### Install requirements$ sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common### Download apt-key$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key a..." }, { "title": "Multi container design pattern", "url": "/posts/multi-container-design-pattern/", "categories": "Network, Architecture, Microservice, Istio, Design pattern", "tags": "Network, Architecture, Microservice, Istio, Design pattern, Sidecar pattern, Abassador pattern, Adapter pattern", "date": "2020-07-20 00:00:00 +0900", "snippet": "내용 작성 중참조 링크Multi-Container Design Patterns 정리" }, { "title": "SQLAlchemy에서 실제 생성된 Query가 보고 싶을 경우", "url": "/posts/sqlalchemy-raw-query/", "categories": "Programming Language, Python, Library, SQLAlchemy, Database", "tags": "Programming Language, Python, ORM, Database", "date": "2020-07-14 00:00:00 +0900", "snippet": "from sqlalchemy.sql import table, column, selectt = table(&#39;t&#39;, column(&#39;x&#39;))s = select([t]).where(t.c.x == 5)# compile_kwargs에 해당 parameter를 넘겨주지 않을 경우, 일부 변수에 대해 치환되지 않은 Query를 Return 한다print(s.compile(compile_kwargs={&quot;literal_binds&quot;: True}))참조 링크SQLAlchemy: print the ac..." }, { "title": "Bokeh chart 및 legend 설정", "url": "/posts/bokeh-legend-and-chart/", "categories": "Data Science, Bokeh", "tags": "Data Science, Data Analysis, Visualization, Python", "date": "2020-07-07 00:00:00 +0900", "snippet": "Chart 예시Line chart:from bokeh.plotting import figure, showTOOLS=&quot;hover,crosshair,wheel_zoom,zoom_in,zoom_out,box_zoom,undo,redo,reset,tap,save,box_select,poly_select&quot;p = figure(x_axis_type=&quot;datetime&quot;, plot_width=1600, plot_height=800, title=&quot;Line example&quot;, tools=TOOL..." }, { "title": "Python", "url": "/posts/build-package/", "categories": "Programming Language, Python", "tags": "Programming Language, Python", "date": "2020-06-03 00:00:00 +0900", "snippet": "나만의 Python Package 만들기 - 1나만의 Python Package 만들기 - 2Package 만들 때 주의사항" }, { "title": "트랜잭션이란", "url": "/posts/transaction/", "categories": "Database, RDBMS", "tags": "개발, Database, RDBMS, Transaction, ACID", "date": "2020-06-02 00:00:00 +0900", "snippet": "트랜잭션?업무 처리를 위한 논리적인 작업 단위(논리적 단위가 단일 연산이 아닐 수 있음)이는 곧 “A 업무 후 B 업무를 수행” 자체가 트랜잭션 단위가 될 수 있음을 의미한다트랜잭션의 특징으로는 보통 “ACID”라 불리우는 4가지 특성이 있다 원자성(Atomicity) 트랜잭션은 더 이상 분해가 불가능한 업무의 최소단위이므로, 전부 처리되거나 아예 하나도 처리되지 않아야 한다(All or Nothing) 일관성(Consistency) 일관된 상태의 데이터베이스에서 하나의 트랜잭션을 성공적으로 완료하고 나면..." }, { "title": "String 다루기", "url": "/posts/string/", "categories": "Programming Language, Java", "tags": "프로그래밍 언어, Java, String, ForEach", "date": "2020-05-16 00:00:00 +0900", "snippet": "String 비교// equals 사용해야 정확한 비교가 가능String a = &quot;hello&quot;;String b = &quot;java&quot;;String c = &quot;hello&quot;;System.out.println(a.equals(b)); // falseSystem.out.println(a.equals(c)); // true// 아래처럼 == 연산자 쓰면 잘못된 결과 도출(주소값 비교를 한다)String a = &quot;hello&quot;;String b = new String(&quot;..." }, { "title": "Array, List 다루기", "url": "/posts/array/", "categories": "Programming Language, Java", "tags": "프로그래밍 언어, Java, Array, List", "date": "2020-05-16 00:00:00 +0900", "snippet": "Array 기본// importimport java.util.Arrays;// 선언String[] weeks = {&quot;월&quot;, &quot;화&quot;, &quot;수&quot;, &quot;목&quot;, &quot;금&quot;, &quot;토&quot;, &quot;일&quot;};// 길이String[] weeks = {&quot;월&quot;, &quot;화&quot;, &quot;수&quot;, &quot;목&quot;, &quot;금&quot;, &quot;토&quot;, &quot;일&quot;};..." }, { "title": "Git Error : refusing to merge unrelated histories", "url": "/posts/git-error-1/", "categories": "DevOps, Git", "tags": "개발, DevOps, Git, 형상관리", "date": "2020-05-12 00:00:00 +0900", "snippet": "Password 저장git config --global credential.helper store### 한 번 git pull을 해주면서 비밀번호를 입력하면 저장된다git pullGit 에러 warning: LF will be replaced by CRLF 해결방법### core.autocrlf 기능 꺼주기git config --global core.autocrlf falseGit 에러 bad signature index file corrupt 해결방법rm -f .git/indexgit reset특정 폴더나 파일 무시하기(.G..." }, { "title": "Git Command &amp; Git Ignore - 1", "url": "/posts/git-1/", "categories": "DevOps, Git", "tags": "개발, DevOps, Git, 형상관리", "date": "2020-05-12 00:00:00 +0900", "snippet": "Password 저장git config --global credential.helper store### 한 번 git pull을 해주면서 비밀번호를 입력하면 저장된다git pullGit 에러 warning: LF will be replaced by CRLF 해결방법### core.autocrlf 기능 꺼주기git config --global core.autocrlf falseGit 에러 bad signature index file corrupt 해결방법rm -f .git/indexgit reset특정 폴더나 파일 무시하기(.G..." }, { "title": "Python에서 사용할만한 code refactoring library등", "url": "/posts/lint/", "categories": "Programming Language, Python, Library, Lint", "tags": "Programming Language, Python", "date": "2020-05-06 00:00:00 +0900", "snippet": "참조 링크Pylint" }, { "title": "Kubernetes - (Intro)", "url": "/posts/kubernetes/", "categories": "Distributed System, Kubernetes", "tags": "개발, Back-end, Web, DevOps, 운영, 유지보수, Infra", "date": "2020-05-06 00:00:00 +0900", "snippet": "내용 작성 중" }, { "title": "Linux(Ubuntu) 사용법", "url": "/posts/ubuntu/", "categories": "OS, Linux, Ubuntu", "tags": "개발, OS, Linux, Ubuntu, Library, 환경 구축", "date": "2020-04-23 00:00:00 +0900", "snippet": "NTFS disk(Windows용 format)를 mount하여 사용하기### Install package: ntfs-3gsudo apt-get updatesudo apt-get install ntfs-3g### Create mount pointsudo mkdir /media/windows### Check disk whether it is formatted NTFS file systemsudo fdisk -l### 기본적으로, 해당 Package를 설치 시, 자동을 /media 하위에서 mount된 disk를 확인 가능하다##..." }, { "title": "앞으로의 블로그 컨텐츠는...?", "url": "/posts/%EB%B0%A9%ED%96%A5%EC%84%B1/", "categories": "General, Life", "tags": "Life, Thought", "date": "2020-04-22 00:00:00 +0900", "snippet": "컨텐츠 업로드 방식끊어서, 내용 단위 별로기존에는 Python이면 Python, RDBMS면 RDBMS로 묶어서 컨텐츠를 입력했다. 묶어서 입력하니 보기가 불편하고,스크롤이 길어지는 단점이 존재한다. 이제부터는 블로그도 어느정도 구축 됐겠다, 각 카테고리에 맞춰서제목에 번호를 입력하든(연재글이면), 여러 방법을 통해 한 글에는 하나의 내용만 담으려고 한다.지금은 개발 위주의 글이 작성되지만, 본디 생명공학을 전공한 나부랭이로 Bioinformatics 관련 글이라던지,유전체 분석 개인 토이 프로젝트를 올린다던지 하면서 제대로 ..." }, { "title": "MongoDB의 메모리 사용량이 과도할 경우 해결 방법(Ubuntu)", "url": "/posts/mongodb(2)/", "categories": "Database, NoSQL, MongoDB", "tags": "개발, Database, NoSQL, MongoDB, Sharding, 환경 구축", "date": "2020-04-22 00:00:00 +0900", "snippet": "MongoDB의 Memory 할당량 설정https://stackoverflow.com/questions/6861184/is-there-any-option-to-limit-mongodb-memory-usage" }, { "title": "Node.js, NPM, etc...", "url": "/posts/nodejs/", "categories": "Network, Server, Node.js", "tags": "개발, Server, Node.js, NPM, Javascript, PM2, Socket.io, 환경 구축", "date": "2020-04-21 00:00:00 +0900", "snippet": "node.js특징 javascript 기반(V8 엔진) 런타임 Event 기반 Non-blocking I/O 모델(libuv) npm을 통한 라이브러리 제공 Single thread 기반Event 기반? Event listener에 callback 함수를 등록해 놓음 Event 발생 시 callback 함수가 호출됨 여러 event가 동시 발생 시, event loop가 순서 판단event loop? event 발생 시 호출할 callback 함수들을 관리 호출된 callback 함수의 실행 순서를 결정 N..." }, { "title": "Pandas 사용법", "url": "/posts/pandas/", "categories": "Data Science, Pandas", "tags": "개발, Python, Pandas, Data Science, Data Analysis", "date": "2020-04-21 00:00:00 +0900", "snippet": "Module Importimport pandas as pd기본적인 Dataframe 형성 및 출력(from MSSQL record 객체)### Dataframe 형성mssql_data = get_record() ### Record를 가져오는 것으로 가정df = pd.DataFrame.from_records(mssql_data, columns=[&#39;id&#39;, &#39;pwd&#39;]) ### Column을 잘 맞추는게 중요### Datafrmae 출력(n -&amp;gt; 항목 개수))df.tail(n=10)Colu..." }, { "title": "개발이란", "url": "/posts/development/", "categories": "General, Development", "tags": "개발, 일반", "date": "2020-04-19 00:00:00 +0900", "snippet": "Code Review코드 리뷰의 주요 포인트 하루 안으로 Reviewer가 진행 주요 로직은 Unit test가 있어야 함 Prototyping code 등 중요도가 낮은 코드는 느슨한 리뷰도 필요 단, 이 경우에는 Repository를 분리 스타일 가이드는 반드시 지키기 Lint로 대부분 거르기 불필요한 공백줄 제거 Editor에서 Extra Whitespace 없애는 옵션을 키면 된다 코드 리뷰의 중요한 요소 더 단순..." }, { "title": "SQL Server", "url": "/posts/mssql/", "categories": "Database, RDBMS, SQL Server", "tags": "RDBMS, Database, MSSQL, SQL Server", "date": "2020-04-19 00:00:00 +0900", "snippet": "Row Number를 매기는 방법SELECT * FROM ( SELECT ROW_NUMBER() OVER(ORDER BY idx) rownum, * FROM page_table ) page_table WHERE rownum BETWEEN 1 AND 20문자열의 시작 위치 찾기SELECT CHARINDEX(&#39;찾을문자열A&#39;,&#39;지정문자열B&#39;)SELECT CHARINDEX(&#39;찾을문자열A&#39;,&#39;지정문자열B&#39;,숫자C) -- 이건 C 위치에서부터 B에서 A를 찾으라는 뜻DML Trig..." }, { "title": "RDBMS, 그리고 SQL", "url": "/posts/rdbms/", "categories": "Database, RDBMS", "tags": "개발, Database, RDBMS, SQL, Query", "date": "2020-04-17 00:00:00 +0900", "snippet": "SELECT COUNT(*)를 빠르게 하는 방법 Index Query Comment 1 SELECT COUNT(*) FROM Transactions Performs a full table scan. Slow on large tables. 2 SELECT CONVERT(bigint, rows) FROM sysindexes WHERE id = OBJECT_ID(‘Transactions’) AND indid &amp..." }, { "title": "MongoDB 설치 및 사용법", "url": "/posts/mongodb(1)/", "categories": "Database, NoSQL, MongoDB", "tags": "개발, Database, NoSQL, MongoDB, Sharding, 환경 구축", "date": "2020-04-16 00:00:00 +0900", "snippet": "Mongo DB란?간단한 정의 NoSQL 데이터베이스로, 기존 RDBMS의 SQL을 사용하는 방식이 아님 테이블 간 관계가 RDBMS와 다르며, ACID 방식으로 작동하지 않음Local 환경의 mount된 disk를 활용한 sharding 구축### 구성은 2개의 샤드 서버, 2개의 config 서버(1개는 replica)### ### Shard servermongod --shardsvr --dbpath {path} --port 30001mongod --shardsvr --dbpath {path} --port 30002##..." }, { "title": "Anaconda 설치 및 사용법", "url": "/posts/anaconda/", "categories": "Data Science, Anaconda", "tags": "개발, Python, Anaconda, Data Science, Data Analysis, 환경 구축", "date": "2020-03-28 00:00:00 +0900", "snippet": "Anaconda3 설치(Ubuntu)### Anaconda3 bash script 실행sudo apt-get updatesudo apt-get install curlcd /tmpcurl –O https://repo.anaconda.com/archive/Anaconda3-{select version by date ex)2019.07}-Linux-x86_64.shbash Anaconda3-2019.07-Linux-x86_64.sh### Activate installationsource ~/.bashrc참조 링크Install Ana..." }, { "title": "PostgreSQL 설치 및 사용법", "url": "/posts/postgresql/", "categories": "Database, RDBMS, PostgreSQL", "tags": "개발, Database, RDBMS, PostgreSQL, 환경 구축", "date": "2020-03-15 00:00:00 +0900", "snippet": "설치(Ubuntu)### postgresql 설치sudo apt-get updatesudo apt-get install postgresql postgresql-contrib### postgresql 계정 변경sudo -i -u postgres### postgresql 접속psql### sudo 계정으로 접속sudo -u postgres psql### 새로운 계정 생성sudo -u postgrescreateuser --interactive### 데이터베이스 생성createdb {db_name, ex: dejavu}### post..." }, { "title": "Jupyter notebook 설치 및 사용법", "url": "/posts/jupyter_notebook/", "categories": "Data Science, Jupyter Notebook", "tags": "Data Science, Data Analysis, Jupyter Notebook, Python", "date": "2020-03-15 00:00:00 +0900", "snippet": "최초 접속 경로 변경법다음의 Command 입력(base) C:\\Users\\User&amp;gt;;jupyter notebook --generate-configWriting default config to: C:\\Users\\User\\.jupyter\\jupyter_notebook_config.py위의 결과로, jupyter_notebook_config.py 수정하면 된다아래의 설정 코드를 입력#### The directory to use for notebooks and kernels.c.NotebookApp.notebook_di..." }, { "title": "Python", "url": "/posts/python/", "categories": "Programming Language, Python", "tags": "Programming Language, Python", "date": "2020-02-19 00:00:00 +0900", "snippet": "파일 크기 확인하는 법### Simple wayimport osb = os.path.getsize(&quot;/path/aaa.txt&quot;)### Another way 1import osstatinfo = os.stat(&quot;somefile.txt&quot;)statinfo.st_size### Another way 2import oswith open(&quot;somefile.txt&quot;, &#39;r&#39;) as f: f.seek(0, os.SEEK_END) size = f.tell()### A..." }, { "title": "Bokeh 사용법", "url": "/posts/bokeh/", "categories": "Data Science, Bokeh", "tags": "Data Science, Data Analysis, Visualization, Python", "date": "2020-02-10 00:00:00 +0900", "snippet": "Bokeh특징 깔끔한 Visualization Framework Jupyter Notebook과 궁합이 좋다Correlation heatmap 그리기import bisect#from math import pifrom numpy import arangefrom itertools import chainfrom collections import OrderedDict#from bokeh.palettes import RdBu as colors ### just make sure to import a palette that cente..." } ]
